# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: ghcr.io/acts-project/${{ matrix.image }}:v11
    strategy:
      matrix:
        image:
          - ubuntu2004
          
    # Setup the environment
    env:
      SETUP: true
      INSTALL_DIR: ${{ github.workspace }}/install
      RUN_DIR: ${{ github.workspace }}/run
      PERFORM_BUILD: false
      UPLOAD_BUILD: false
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Init the submodule
      - name: Initialise git submodules
        run: | 
          git submodule update --init
          git --git-dir=acts/.git log | head -1 > acts.checkout.commit
          git fetch origin gh-pages
          git restore --source origin/gh-pages -- data/build/installed.tgz
          tar xvfz data/build/installed.tgz

      # Check if build is necessary -       #/bin/bash -c "diff -q acts.checkout.commit installed/acts.build.commit > diff.commit" && 
      - name: Check last build for validity
        shell: bash
        run: |
          export CHECKOUT_COMMIT=`cat acts.checkout.commit | cut -c8-47`
          export BUILD_COMMIT=`cat installed/acts.build.commit | cut -c8-47`
          echo "[ check ] current checkout commit: ${CHECKOUT_COMMIT}"
          echo "[ check ] last build commit: ${BUILD_COMMIT}"
          if [ ${CHECKOUT_COMMIT} == ${BUILD_COMMIT} ]; then
            echo "[ check ] No build neccessary"
            echo "PERFORM_BUILD=false" >> $GITHUB_ENV
          else
            echo "[ check ] Rebuild neccessary"
            echo "PERFORM_BUILD=true" >> $GITHUB_ENV
          fi

      # Configure CMake
      - name: Configure CMake
        if : false # ${{ env.PERFORM_BUILD == 'true' }}
        run: >
          ${SETUP} && 
          cmake -B build -S acts
          -GNinja
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_CXX_FLAGS=-Werror
          -DCMAKE_INSTALL_PREFIX="${INSTALL_DIR}"
          -DACTS_BUILD_UNITTESTS=OFF
          -DACTS_BUILD_BENCHMARKS=OFF
          -DACTS_BUILD_INTEGRATIONTESTS=OFF
          -DACTS_BUILD_PLUGIN_DD4HEP=ON
          -DACTS_BUILD_PLUGIN_DIGITIZATION=ON
          -DACTS_BUILD_PLUGIN_IDENTIFICATION=ON
          -DACTS_BUILD_PLUGIN_JSON=ON
          -DACTS_BUILD_FATRAS=ON
          -DACTS_BUILD_FATRAS_GEANT4=ON
          -DACTS_BUILD_EXAMPLES=ON
          -DACTS_BUILD_EXAMPLES_DD4HEP=ON
          -DACTS_BUILD_EXAMPLES_GEANT4=ON
          -DACTS_BUILD_EXAMPLES_HEPMC3=ON
          -DACTS_BUILD_EXAMPLES_PYTHIA8=ON
          -DACTS_LOG_FAILURE_THRESHOLD=WARNING
          
      # Build and Install ACTS, github runners are dual-core VMS
      - name: Build ACTS
        if : false # ${{ env.PERFORM_BUILD == 'true' }}
        run: |
          cmake --build build -j2 -- install
          echo "UPLOAD_BUILD=true" >> $GITHUB_ENV

      # Use the installed folder as is
      - name: Prepare reuse of ACTS build
        if : true # ${{ env.PERFORM_BUILD == 'false' }}
        working-directory: ${{github.workspace}}
        run: |
          mv installed install
          

      # Setup run environment 
      - name: Setup run environment
        shell: bash
        run:  | 
          cd /usr/local 
          source bin/thisdd4hep.sh
          source ${{ github.workspace }}/install/bin/this_acts.sh
            
      # Muon chain test
      - name: Multi/Single muon chain test
        shell: bash
        run: source ${GITHUB_WORKSPACE}/scripts/run_pdgX_mpY_nZ.sh 13 100 1000 10

      # Upload the build
      - name: Zip and upload build
        if: ${{ env.UPLOAD_BUILD == 'true' }}
        working-directory: ${{github.workspace}}
        shell: bash      
        run: |
          mv install installed
          mv acts.checkout.commit installed/acts.build.commit
          tar cvfz ${{ github.workspace }}/installed
          git checkout gh-pages
          mv  installed.tgz data/build/installed.tgz
          git push 'https://asalzburger:${{ secrets.PERSONAL_GITHUB_TOKEN }}@github.com/asalzburger/acts-benchmark-odd.git' gh-pages:gh-pages





